package enshud.s3.checker;

public interface Visitor {
    void visit(Program program);
    void visit(ProgramName programName);
    void visit(Block block);
    void visit(VariableDeclaration variableDeclaration);
    void visit(VariableDeclarationGroup variableDeclarationGroup);
    void visit(VariableNameGroup variableNameGroup);
    void visit(VariableName variableName);
    void visit(Type type);
    void visit(GeneralType generalType);
    void visit(ArrayType arrayType);
    void visit(Integer integer);
    void visit(Sign sign);
    void visit(SubprogramDeclarationGroup subprogramDeclarationGroup);
    void visit(SubprogramDeclaration subprogramDeclaration);
    void visit(SubprogramHead subprogramHead);
    void visit(ProcedureName procedureName);
    void visit(FormalParameter formalParameter);
    void visit(FormalParameterGroup formalParameterGroup);
    void visit(FormalParameterNameGroup formalParameterNameGroup);
    void visit(FormalParameterName formalParameterName);
    void visit(ComplexStatement complexStatement);
    void visit(StatementGroup statementGroup);
    void visit(Statement statement);
    void visit(Else elseStatement);
    void visit(IfThen ifThen);
    void visit(WhileDo whileDo);
    void visit(BasicStatement basicStatement);
    void visit(AssignStatement assignStatement);
    void visit(LeftSide leftSide);
    void visit(Variable variable);
    void visit(NaturalVariable naturalVariable);
    void visit(VariableWithIndex variableWithIndex);
    void visit(Index index);
    void visit(ProcedureCallStatement procedureCallStatement);
    void visit(EquationGroup equationGroup);
    void visit(Equation equation);
    void visit(SimpleEquation simpleEquation);
    void visit(Term term);
    void visit(Factor factor);
    void visit(RelationalOperator relationalOperator);
    void visit(AdditionalOperator additionalOperator);
    void visit(MultipleOperator multipleOperator);
    void visit(InputOutputStatement inputOutputStatement);
    void visit(VariableGroup variableGroup);
    void visit(Constant constant);
    void visit(UnsignedInteger unsignedInteger);
}
